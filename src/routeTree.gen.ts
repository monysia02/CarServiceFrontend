/* eslint-disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.
// Import Routes
import { Route as rootRoute } from './routes/__root';
import { Route as CarsImport } from './routes/cars';
import { Route as ClientsImport } from './routes/clients';
import { Route as EmployeesImport } from './routes/employees';
import { Route as IndexImport } from './routes/index';
import { Route as RepairsImport } from './routes/repairs';

// Create/Update Routes

const RepairsRoute = RepairsImport.update({
  id: '/repairs',
  path: '/repairs',
  getParentRoute: () => rootRoute,
} as any);

const EmployeesRoute = EmployeesImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => rootRoute,
} as any);

const ClientsRoute = ClientsImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRoute,
} as any);

const CarsRoute = CarsImport.update({
  id: '/cars',
  path: '/cars',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/cars': {
      id: '/cars';
      path: '/cars';
      fullPath: '/cars';
      preLoaderRoute: typeof CarsImport;
      parentRoute: typeof rootRoute;
    };
    '/clients': {
      id: '/clients';
      path: '/clients';
      fullPath: '/clients';
      preLoaderRoute: typeof ClientsImport;
      parentRoute: typeof rootRoute;
    };
    '/employees': {
      id: '/employees';
      path: '/employees';
      fullPath: '/employees';
      preLoaderRoute: typeof EmployeesImport;
      parentRoute: typeof rootRoute;
    };
    '/repairs': {
      id: '/repairs';
      path: '/repairs';
      fullPath: '/repairs';
      preLoaderRoute: typeof RepairsImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/cars': typeof CarsRoute;
  '/clients': typeof ClientsRoute;
  '/employees': typeof EmployeesRoute;
  '/repairs': typeof RepairsRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/cars': typeof CarsRoute;
  '/clients': typeof ClientsRoute;
  '/employees': typeof EmployeesRoute;
  '/repairs': typeof RepairsRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/cars': typeof CarsRoute;
  '/clients': typeof ClientsRoute;
  '/employees': typeof EmployeesRoute;
  '/repairs': typeof RepairsRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/cars' | '/clients' | '/employees' | '/repairs';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/cars' | '/clients' | '/employees' | '/repairs';
  id: '__root__' | '/' | '/cars' | '/clients' | '/employees' | '/repairs';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  CarsRoute: typeof CarsRoute;
  ClientsRoute: typeof ClientsRoute;
  EmployeesRoute: typeof EmployeesRoute;
  RepairsRoute: typeof RepairsRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CarsRoute: CarsRoute,
  ClientsRoute: ClientsRoute,
  EmployeesRoute: EmployeesRoute,
  RepairsRoute: RepairsRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cars",
        "/clients",
        "/employees",
        "/repairs"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cars": {
      "filePath": "cars.tsx"
    },
    "/clients": {
      "filePath": "clients.tsx"
    },
    "/employees": {
      "filePath": "employees.tsx"
    },
    "/repairs": {
      "filePath": "repairs.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
